pipeline {
    agent any
    
    environment {
        registryBack = "justelyes/spring"
        registryBackAzure = 'justelyes.azurecr.io/spring'
    }

    stages {
        stage("Clone code depuis GitHub") {
            steps {
                script {
                    git branch: 'Elyes', url: 'https://github.com/NOUR-BEN-ALI/devops-back.git'
                }
            }
        }

        
           stage("Maven Build and Test") {
            steps {
                    sh 'mvn clean install'
            }
        }
                stage('SonarQube analysis Spring Boot') {
            steps {
                    withSonarQubeEnv('sonarq') {
                        sh 'mvn sonar:sonar'
                    }
            }
        }
                stage('Nexus Deploy') {
            steps {
                script {
                        withCredentials([usernamePassword(credentialsId: 'creds_nexus', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                            withMaven(
                                globalMavenSettingsConfig: '',
                                jdk: 'JAVA_HOME',
                                maven: 'M2_HOME',
                                mavenSettingsConfig: '',
                                mavenSettingsFilePath: '/usr/share/maven/conf/settings.xml'
                            ) {
                                sh "mvn deploy -Dusername=${NEXUS_USERNAME} -Dpassword=${NEXUS_PASSWORD}"
                                sh 'docker restart spring'
                                emailext body: 'TeamWork Job $BUILD_NUMBER : has completed successfully.', recipientProviders: [buildUser()], subject: 'Pipeline Status ! ', to: 'medelyes.abidi@esprit.tn'


                            }
                        }
                }
            }
        }

        stage('Building a Docker Image') {
            steps {
                script {
                        def dockerImage = docker.build "${registryBack}:$BUILD_NUMBER"
                }
            }
        }

  stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    withDockerRegistry([credentialsId: 'docker_credss', url: 'https://index.docker.io/v1/']) {
                        sh "docker push ${registryBack}:$BUILD_NUMBER"
                    }
                }
            }
        }
     
        stage('Docker-compose Deploy') {
            steps {
               sh 'docker-compose up --build -d'
               sh 'echo "done!"'
            }
        }       
    }
}

